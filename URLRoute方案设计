URLRoute方案设计

一、背景

1、客户端会在任何时候可能会需要跳转到任意界面
2、对已发布的包也能随时变更跳转控制
3、当新跳转事件不支持时，需要客户端自己打开wap页提供内容
4、旧版全界面跳转协议太死板，有冗余，不支持扩展
5、期望用统一的方式调用客户端功能，如登录、分享、复制到剪贴板等

二、方案简述

1、通过客户端本地配置文件来标记可支持的界面和行为，该配置文件可在编译时由脚本生成并放入安装包
2、通过NativeNginx对旧版进行兼容，收到旧版格式的指令时，使用旧版代码实现界面跳转；收到新版格式指令，则使用新版代码
3、新版使用NativeRouter完成对指令的解析，然后执行界面跳转和功能调用
4、遇到不可识别的指令，则自动降级为url，使用wap页打开；要求新的wap界面的路径按固定规则部署

三、URL格式

参考标准URL格式
<scheme>://<host>/<path>?<query>#<anchor>

<scheme>	——	方案，用于从外部或内部wap页打开客户端页面，或者H5主动调用客户端方法。
<host>		——	域名，可过滤掉异常的路由请求。
<path>		——	路径，要打开的页面或要调用的功能的key，若该key能在路由表中查到，则可以打开相应的页面或功能。
<query>		——	查询，打开页面或功能所需的参数。
<anchor>	——	锚点，客户端暂时用不到。

三、NativeNginx

根据本地配置表（也可下发）将收到的跳转请求替换成支持的格式。

本地配置正则表达式，判断服务端下发的跳转请求属于哪种格式的，再将其转成当前客户端版本支持的格式。

已由沈寅完成开发，使用C++语言，原打算 iOS & Android 通用，但目前仅海狐 iOS 验证可行
详见github：
https://github.com/shenruisi/prengine

Android 若无法顺利与 C++ 库打通，可以另外写一个 Java 库，原理相同。

四、NativeRouter

从本地读取路由配置表，若URL解析后的path能在路由表中查到，则初始化相应的类；然后将query中的参数和值设置到类属性中；上述两步都成功，可以打开新的原生页，否则将scheme替换成https使用webview打开该URL。

通过scheme区分是打开新页面还是调用原生功能，解析逻辑大同小异。

客户端内部打开则可以直接开放一些便于调用的方法，而不用拼成url，以便传入非基本数据类型和获得返回值。

逻辑流程图见附件。

五、本地路由配置表的生成

客户端添加新的页面或者开放新的功能时，在该页面代码的头部增加一段注释，该注释说明了当前类或功能的key。
客户端代码文件组织结构整理，将界面文件放在同一目录层级或同一规则目录层级下，便于脚本访问。
通过脚本读取每个类或功能头部注释中的key，将key和类名对应生成配置文件。
在编译客户端安装包时执行上述脚本，并将脚本放入安装包中。

（在该脚本尚未设计好之前，也可以直接手动编辑生成脚本 =_=b）